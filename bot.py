from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8402424321:AAH-LHIMD1X_0ehxO5joFNLp8fePNYND76g"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = [
    "–ª–∏—á–Ω–æ–µ", "–ø–æ–∫—É–ø–∫–∏", "–æ—Ñ–∏—Å—Ç–∞–π–º",
    "–¥–æ–º/–º—ã–ª–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "—Ä–µ–±—ë–Ω–æ–∫", "–ø—Ä–æ—á–µ–µ"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ: { user_id: { category: [ { "text": "...", "done": False }, ... ] } }
user_data = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
DATA_FILE = "tasks.json"

def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ user_id –∏–∑ str –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                user_data = {int(k): v for k, v in raw.items()}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    buttons = [[KeyboardButton(cat)] for cat in CATEGORIES]
    buttons.append([KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë"), KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = {cat: [] for cat in CATEGORIES}
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É ‚Äî —è –¥–æ–±–∞–≤–ª—é –µ—ë –≤ '–ø—Ä–æ—á–µ–µ'.",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {cat: [] for cat in CATEGORIES}

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if text in CATEGORIES:
        context.user_data["selected_category"] = text
        tasks = user_data[user_id][text]
        if tasks:
            msg = f"üìå *{text.capitalize()}*:\n\n"
            for i, task in enumerate(tasks, 1):
                mark = "‚úÖ" if task["done"] else "‚¨ú"
                msg += f"{i}. {mark} {task['text']}\n"
            msg += f"\n–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)"
        else:
            msg = f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{text}* –ø–æ–∫–∞ –ø—É—Å—Ç–æ.\n–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É ‚Äî —è –¥–æ–±–∞–≤–ª—é –µ—ë!"
        await update.message.reply_text(msg, parse_mode="Markdown")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë"
    if text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë":
        full_msg = "üìù *–í—Å–µ –∑–∞–¥–∞—á–∏:*\n\n"
        has_tasks = False
        for cat in CATEGORIES:
            tasks = user_data[user_id][cat]
            if tasks:
                has_tasks = True
                full_msg += f"üîπ *{cat.capitalize()}*:\n"
                for task in tasks:
                    mark = "‚úÖ" if task["done"] else "‚¨ú"
                    full_msg += f"  ‚Ä¢ {mark} {task['text']}\n"
                full_msg += "\n"
        if not has_tasks:
            full_msg = "‚ú® –í—Å–µ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã!"
        await update.message.reply_text(full_msg, parse_mode="Markdown")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"
    if text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë":
        user_data[user_id] = {cat: [] for cat in CATEGORIES}
        save_data()
        await update.message.reply_text("–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã! üßπ")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–æ–º–µ—Ä
    selected_cat = context.user_data.get("selected_category", "–ø—Ä–æ—á–µ–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä–æ–º –∑–∞–¥–∞—á–∏
    if text.isdigit():
        task_num = int(text) - 1
        tasks = user_data[user_id][selected_cat]
        if 0 <= task_num < len(tasks):
            tasks[task_num]["done"] = not tasks[task_num]["done"]
            status = "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if tasks[task_num]["done"] else "–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É"
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ ‚Ññ{task_num + 1} {status} ‚úÖ")
            save_data()
        else:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    # –ò–Ω–∞—á–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    user_data[user_id][selected_cat].append({"text": text, "done": False})
    save_data()
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *{selected_cat}*:\n¬´{text}¬ª", parse_mode="Markdown")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    load_data()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()