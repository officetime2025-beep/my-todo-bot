from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, JobQueue
import json
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ Railway)
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π –≤ Railway!)
TOKEN = os.environ["TOKEN"]

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = [
    "–ª–∏—á–Ω–æ–µ", "–ø–æ–∫—É–ø–∫–∏", "–æ—Ñ–∏—Å—Ç–∞–π–º",
    "–¥–æ–º/–º—ã–ª–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–ì–ª–µ–±", "–ù–∏–∫–∏—Ç–∞"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
DATA_FILE = "tasks.json"

def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
                user_data = {int(k): v for k, v in raw.items()}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def get_main_keyboard():
    buttons = [[KeyboardButton(cat)] for cat in CATEGORIES]
    buttons.append([KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë")])  # ¬´–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë¬ª —É–¥–∞–ª–µ–Ω–æ
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=False)

async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.chat_id

    if user_id not in user_data:
        return

    # –°—á–∏—Ç–∞–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    total_pending = 0
    for cat in CATEGORIES:
        tasks = user_data[user_id][cat]
        pending = [t for t in tasks if not t["done"]]
        total_pending += len(pending)

    if total_pending > 0:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üïí –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –£ —Ç–µ–±—è {total_pending} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –Ω–∏—Ö! üòä"
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ú® –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ"
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_
        user_data[user_id] = {cat: [] for cat in CATEGORIES}

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    job_queue = context.job_queue
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    current_jobs = job_queue.get_jobs_by_name(str(user_id))
    for job in current_jobs:
        job.schedule_removal()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
    # - –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∞!)
    # - –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    job_queue.run_repeating(
        send_daily_reminder,
        interval=24 * 60 * 60,  # 24 —á–∞—Å–∞
        first=10,               # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        chat_id=update.effective_chat.id,
        name=str(user_id)
    )

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª.\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É ‚Äî —è –¥–æ–±–∞–≤–ª—é –µ—ë –≤ '–ø—Ä–æ—á–µ–µ'.",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in user_
        user_data[user_id] = {cat: [] for cat in CATEGORIES}

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if text in CATEGORIES:
        context.user_data["selected_category"] = text
        tasks = user_data[user_id][text]
        if not tasks:
            await update.message.reply_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{text}* –ø–æ–∫–∞ –ø—É—Å—Ç–æ.\n–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É ‚Äî —è –¥–æ–±–∞–≤–ª—é –µ—ë!",
                parse_mode="Markdown"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for i, task in enumerate(tasks):
            mark = "‚úÖ" if task["done"] else "‚¨ú"
            msg_text = f"{mark} *{task['text']}*"
            toggle_data = f"toggle_{text}_{i}"
            delete_data = f"delete_{text}_{i}"
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=toggle_data),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=delete_data)
                ]
            ])
            await update.message.reply_text(msg_text, parse_mode="Markdown", reply_markup=keyboard)
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë
    if text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë":
        full_msg = "üìù *–í—Å–µ –∑–∞–¥–∞—á–∏:*\n\n"
        has_tasks = False
        for cat in CATEGORIES:
            tasks = user_data[user_id][cat]
            if tasks:
                has_tasks = True
                full_msg += f"üîπ *{cat.capitalize()}*:\n"
                for task in tasks:
                    mark = "‚úÖ" if task["done"] else "‚¨ú"
                    full_msg += f"  ‚Ä¢ {mark} {task['text']}\n"
                full_msg += "\n"
        if not has_tasks:
            full_msg = "‚ú® –í—Å–µ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã!"
        await update.message.reply_text(full_msg, parse_mode="Markdown")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    selected_cat = context.user_data.get("selected_category", "–ø—Ä–æ—á–µ–µ")
    user_data[user_id][selected_cat].append({"text": text, "done": False})
    save_data()
    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ *{selected_cat}*:\n¬´{text}¬ª",
        parse_mode="Markdown"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    data = query.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if data.startswith("toggle_"):
        parts = data.split("_", 2)
        if len(parts) != 3:
            return
        _, category, index_str = parts
        try:
            index = int(index_str)
        except ValueError:
            return

        if user_id not in user_data or category not in user_data[user_id]:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –û—Ç–∫—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.")
            return

        tasks = user_data[user_id][category]
        if 0 <= index < len(tasks):
            tasks[index]["done"] = not tasks[index]["done"]
            save_data()
            mark = "‚úÖ" if tasks[index]["done"] else "‚¨ú"
            await query.edit_message_text(
                text=f"{mark} *{tasks[index]['text']}*",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"toggle_{category}_{index}"),
                        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{category}_{index}")
                    ]
                ])
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    if data.startswith("delete_"):
        parts = data.split("_", 2)
        if len(parts) != 3:
            return
        _, category, index_str = parts
        try:
            index = int(index_str)
        except ValueError:
            return

        if user_id not in user_data or category not in user_data[user_id]:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏.")
            return

        tasks = user_data[user_id][category]
        if 0 <= index < len(tasks):
            deleted_task = tasks.pop(index)
            save_data()
            await query.edit_message_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: *{deleted_task['text']}*", parse_mode="Markdown")
        return

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    load_data()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


